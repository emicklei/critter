<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="rule" type="rule"/>

    <xs:complexType name="rule">
        <xs:annotation>
            <xs:documentation>Critter example Rule if all the conditions are met then perform all the actions
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="conditions" type="conditions"/>
            <xs:element name="actions" type="actions"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="id"/>
        <xs:attribute type="xs:boolean" name="enabled"/>
        <xs:attribute type="xs:boolean" name="tracing"/>
    </xs:complexType>

    <xs:complexType name="conditions">
        <xs:choice maxOccurs="unbounded">
            <xs:element name="host" type="host"/>
            <xs:element name="method" type="method"/>
            <xs:element name="path" type="path"/>
            <xs:element name="port" type="port"/>
            <xs:element name="requestheader" type="header"/>
            <xs:element name="basicauthentication" type="basicauthentication"/>
            <xs:element name="xpath" type="xpath"/>
            <xs:element name="equals" type="equals"/>
            <xs:element name="not" type="not"/>
            <xs:element name="protobufpath" type="protobufpath"/>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="matches">
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="host">
        <xs:annotation>
            <xs:documentation>true if the hostname of the request matches the given value</xs:documentation>
        </xs:annotation>
        <xs:attribute type="matches" name="matches"/>
    </xs:complexType>

    <xs:complexType name="method">
        <xs:annotation>
            <xs:documentation>true if the methodname of the request matches the given value</xs:documentation>
        </xs:annotation>
        <xs:attribute type="matches" name="matches"/>
    </xs:complexType>

    <xs:complexType name="path">
        <xs:annotation>
            <xs:documentation>true if the URL path of the request matches the given value</xs:documentation>
        </xs:annotation>
        <xs:attribute type="matches" name="matches"/>
    </xs:complexType>

    <xs:complexType name="port">
        <xs:annotation>
            <xs:documentation>true if the URL port of the request matches the given value</xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:short" name="matches"/>
    </xs:complexType>

    <xs:complexType name="header">
        <xs:annotation>
            <xs:documentation>true if the specified Header (by name) of the request matches the given value
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="name"/>
        <xs:attribute type="matches" name="matches"/>
    </xs:complexType>

    <xs:complexType name="basicauthentication">
        <xs:annotation>
            <xs:documentation>true if the Authorization header matches the Base64 encoded version of username:password
                combination
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="username"/>
        <xs:attribute type="xs:string" name="password"/>
    </xs:complexType>

    <xs:complexType name="xpath">
        <xs:annotation>
            <xs:documentation>true if the Xpath expression matches the body of the request (content-type must be
                application/xml)
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="expression"/>
        <xs:attribute type="xs:short" name="matches"/>
    </xs:complexType>

    <xs:complexType name="protobufpath">
        <xs:annotation>
            <xs:documentation>true if the Protobuf path expression matches the body of the request (content-type must be
                application/octet-stream)
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="messageName"/>
        <xs:attribute type="xs:string" name="expression"/>
        <xs:attribute type="xs:string" name="matches"/>
    </xs:complexType>

    <xs:complexType name="equals">
        <xs:annotation>
            <xs:documentation>true if the specified parameter with the specified value exists</xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="parameter"/>
        <xs:attribute type="xs:string" name="value"/>
    </xs:complexType>

    <xs:complexType name="not">
        <xs:annotation>
            <xs:documentation>you can wrap any condition in a not element</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="host" type="host"/>
            <xs:element name="method" type="method"/>
            <xs:element name="path" type="path"/>
            <xs:element name="port" type="port"/>
            <xs:element name="header" type="header"/>
            <xs:element name="basicauthentication" type="basicauthentication"/>
            <xs:element name="xpath" type="xpath"/>
            <xs:element name="equals" type="equals"/>
            <xs:element name="protobufpath" type="protobufpath"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="actions">
        <xs:choice maxOccurs="unbounded">
            <xs:element name="scheme" type="scheme" minOccurs="0"/>
            <xs:element name="port" type="portAction" minOccurs="0"/>
            <xs:element name="delay" type="delay" minOccurs="0"/>
            <xs:element name="responseheader" type="responseheader" minOccurs="0"/>
            <xs:element name="forward" type="forward" minOccurs="0"/>
            <xs:element name="status" type="status" minOccurs="0"/>
            <xs:element name="responsebody" type="responsebody" minOccurs="0"/>
            <xs:element name="close" type="close" minOccurs="0"/>
            <xs:element name="respond" type="respond" minOccurs="0"/>
            <xs:element name="trace" type="trace" minOccurs="0"/>
            <xs:element name="record" type="record" minOccurs="0"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="scheme">
        <xs:annotation>
            <xs:documentation>change the scheme of the request, e.g. http->https. Must be put before a forward
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="name"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="portAction">
        <xs:annotation>
            <xs:documentation>change the port to the given one</xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="value"/>
    </xs:complexType>

    <xs:complexType name="forward">
        <xs:annotation>
            <xs:documentation>forward the request to the host as defined by the request</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="delay">
        <xs:annotation>
            <xs:documentation>make the proxy wait for a number of milliseconds during processing of the request
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:short" name="ms"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="responseheader">
        <xs:annotation>
            <xs:documentation>remove or add the specified Header with the given value</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="remove"/>
                <xs:attribute type="xs:string" name="add"/>
                <xs:attribute type="xs:string" name="value"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="status">
        <xs:annotation>
            <xs:documentation>set the status code of the response that will be send back to the client
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:short" name="code"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="responsebody">
        <xs:annotation>
            <xs:documentation>set the response body that will be send back to the client , status code is optional
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="xs:string" name="body"/>
        </xs:sequence>
        <xs:attribute type="xs:short" name="code"/>
        <xs:attribute type="xs:string" name="base64"/>
    </xs:complexType>

    <xs:complexType name="close">
        <xs:annotation>
            <xs:documentation>close the outputstream of the response (not really a disconnect)</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="respond">
        <xs:annotation>
            <xs:documentation>send the response back to the client</xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="trace">
        <xs:annotation>
            <xs:documentation>dump information about the request or response (depends on location w.r.t forward)
            </xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <xs:complexType name="record">
        <xs:annotation>
            <xs:documentation>create or overwrite a new disabled recording</xs:documentation>
        </xs:annotation>
    </xs:complexType>

</xs:schema>
